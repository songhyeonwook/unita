# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erp42_msgs/SerialFeedBack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SerialFeedBack(genpy.Message):
  _md5sum = "977be1b73fb4d99913310d68e9241255"
  _type = "erp42_msgs/SerialFeedBack"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """########################################
# Messages
########################################
uint8 MorA
uint8 EStop
uint8 Gear
float64 speed
float64 steer
int16 brake
int32 encoder
uint8 alive
"""
  __slots__ = ['MorA','EStop','Gear','speed','steer','brake','encoder','alive']
  _slot_types = ['uint8','uint8','uint8','float64','float64','int16','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MorA,EStop,Gear,speed,steer,brake,encoder,alive

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SerialFeedBack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.MorA is None:
        self.MorA = 0
      if self.EStop is None:
        self.EStop = 0
      if self.Gear is None:
        self.Gear = 0
      if self.speed is None:
        self.speed = 0.
      if self.steer is None:
        self.steer = 0.
      if self.brake is None:
        self.brake = 0
      if self.encoder is None:
        self.encoder = 0
      if self.alive is None:
        self.alive = 0
    else:
      self.MorA = 0
      self.EStop = 0
      self.Gear = 0
      self.speed = 0.
      self.steer = 0.
      self.brake = 0
      self.encoder = 0
      self.alive = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B2dhiB().pack(_x.MorA, _x.EStop, _x.Gear, _x.speed, _x.steer, _x.brake, _x.encoder, _x.alive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.MorA, _x.EStop, _x.Gear, _x.speed, _x.steer, _x.brake, _x.encoder, _x.alive,) = _get_struct_3B2dhiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B2dhiB().pack(_x.MorA, _x.EStop, _x.Gear, _x.speed, _x.steer, _x.brake, _x.encoder, _x.alive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.MorA, _x.EStop, _x.Gear, _x.speed, _x.steer, _x.brake, _x.encoder, _x.alive,) = _get_struct_3B2dhiB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B2dhiB = None
def _get_struct_3B2dhiB():
    global _struct_3B2dhiB
    if _struct_3B2dhiB is None:
        _struct_3B2dhiB = struct.Struct("<3B2dhiB")
    return _struct_3B2dhiB
