// Generated by gencpp from file erp42_msgs/SerialFeedBack.msg
// DO NOT EDIT!


#ifndef ERP42_MSGS_MESSAGE_SERIALFEEDBACK_H
#define ERP42_MSGS_MESSAGE_SERIALFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace erp42_msgs
{
template <class ContainerAllocator>
struct SerialFeedBack_
{
  typedef SerialFeedBack_<ContainerAllocator> Type;

  SerialFeedBack_()
    : MorA(0)
    , EStop(0)
    , Gear(0)
    , speed(0.0)
    , steer(0.0)
    , brake(0)
    , encoder(0)
    , alive(0)  {
    }
  SerialFeedBack_(const ContainerAllocator& _alloc)
    : MorA(0)
    , EStop(0)
    , Gear(0)
    , speed(0.0)
    , steer(0.0)
    , brake(0)
    , encoder(0)
    , alive(0)  {
  (void)_alloc;
    }



   typedef uint8_t _MorA_type;
  _MorA_type MorA;

   typedef uint8_t _EStop_type;
  _EStop_type EStop;

   typedef uint8_t _Gear_type;
  _Gear_type Gear;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _steer_type;
  _steer_type steer;

   typedef int16_t _brake_type;
  _brake_type brake;

   typedef int32_t _encoder_type;
  _encoder_type encoder;

   typedef uint8_t _alive_type;
  _alive_type alive;





  typedef boost::shared_ptr< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> const> ConstPtr;

}; // struct SerialFeedBack_

typedef ::erp42_msgs::SerialFeedBack_<std::allocator<void> > SerialFeedBack;

typedef boost::shared_ptr< ::erp42_msgs::SerialFeedBack > SerialFeedBackPtr;
typedef boost::shared_ptr< ::erp42_msgs::SerialFeedBack const> SerialFeedBackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erp42_msgs::SerialFeedBack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::erp42_msgs::SerialFeedBack_<ContainerAllocator1> & lhs, const ::erp42_msgs::SerialFeedBack_<ContainerAllocator2> & rhs)
{
  return lhs.MorA == rhs.MorA &&
    lhs.EStop == rhs.EStop &&
    lhs.Gear == rhs.Gear &&
    lhs.speed == rhs.speed &&
    lhs.steer == rhs.steer &&
    lhs.brake == rhs.brake &&
    lhs.encoder == rhs.encoder &&
    lhs.alive == rhs.alive;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::erp42_msgs::SerialFeedBack_<ContainerAllocator1> & lhs, const ::erp42_msgs::SerialFeedBack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace erp42_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "977be1b73fb4d99913310d68e9241255";
  }

  static const char* value(const ::erp42_msgs::SerialFeedBack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x977be1b73fb4d999ULL;
  static const uint64_t static_value2 = 0x13310d68e9241255ULL;
};

template<class ContainerAllocator>
struct DataType< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erp42_msgs/SerialFeedBack";
  }

  static const char* value(const ::erp42_msgs::SerialFeedBack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "########################################\n"
"# Messages\n"
"########################################\n"
"uint8 MorA\n"
"uint8 EStop\n"
"uint8 Gear\n"
"float64 speed\n"
"float64 steer\n"
"int16 brake\n"
"int32 encoder\n"
"uint8 alive\n"
;
  }

  static const char* value(const ::erp42_msgs::SerialFeedBack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MorA);
      stream.next(m.EStop);
      stream.next(m.Gear);
      stream.next(m.speed);
      stream.next(m.steer);
      stream.next(m.brake);
      stream.next(m.encoder);
      stream.next(m.alive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SerialFeedBack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erp42_msgs::SerialFeedBack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erp42_msgs::SerialFeedBack_<ContainerAllocator>& v)
  {
    s << indent << "MorA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MorA);
    s << indent << "EStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EStop);
    s << indent << "Gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Gear);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "brake: ";
    Printer<int16_t>::stream(s, indent + "  ", v.brake);
    s << indent << "encoder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder);
    s << indent << "alive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERP42_MSGS_MESSAGE_SERIALFEEDBACK_H
