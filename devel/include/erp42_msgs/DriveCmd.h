// Generated by gencpp from file erp42_msgs/DriveCmd.msg
// DO NOT EDIT!


#ifndef ERP42_MSGS_MESSAGE_DRIVECMD_H
#define ERP42_MSGS_MESSAGE_DRIVECMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace erp42_msgs
{
template <class ContainerAllocator>
struct DriveCmd_
{
  typedef DriveCmd_<ContainerAllocator> Type;

  DriveCmd_()
    : KPH(0)
    , Deg(0)
    , brake(0)  {
    }
  DriveCmd_(const ContainerAllocator& _alloc)
    : KPH(0)
    , Deg(0)
    , brake(0)  {
  (void)_alloc;
    }



   typedef uint16_t _KPH_type;
  _KPH_type KPH;

   typedef int16_t _Deg_type;
  _Deg_type Deg;

   typedef uint8_t _brake_type;
  _brake_type brake;





  typedef boost::shared_ptr< ::erp42_msgs::DriveCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erp42_msgs::DriveCmd_<ContainerAllocator> const> ConstPtr;

}; // struct DriveCmd_

typedef ::erp42_msgs::DriveCmd_<std::allocator<void> > DriveCmd;

typedef boost::shared_ptr< ::erp42_msgs::DriveCmd > DriveCmdPtr;
typedef boost::shared_ptr< ::erp42_msgs::DriveCmd const> DriveCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erp42_msgs::DriveCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erp42_msgs::DriveCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::erp42_msgs::DriveCmd_<ContainerAllocator1> & lhs, const ::erp42_msgs::DriveCmd_<ContainerAllocator2> & rhs)
{
  return lhs.KPH == rhs.KPH &&
    lhs.Deg == rhs.Deg &&
    lhs.brake == rhs.brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::erp42_msgs::DriveCmd_<ContainerAllocator1> & lhs, const ::erp42_msgs::DriveCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace erp42_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erp42_msgs::DriveCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erp42_msgs::DriveCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42_msgs::DriveCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69a82c1e3ba067908d8fabb7e7d8716a";
  }

  static const char* value(const ::erp42_msgs::DriveCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69a82c1e3ba06790ULL;
  static const uint64_t static_value2 = 0x8d8fabb7e7d8716aULL;
};

template<class ContainerAllocator>
struct DataType< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erp42_msgs/DriveCmd";
  }

  static const char* value(const ::erp42_msgs::DriveCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "########################################\n"
"# Messages\n"
"########################################\n"
"uint16 KPH\n"
"int16 Deg\n"
"uint8 brake\n"
;
  }

  static const char* value(const ::erp42_msgs::DriveCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.KPH);
      stream.next(m.Deg);
      stream.next(m.brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erp42_msgs::DriveCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erp42_msgs::DriveCmd_<ContainerAllocator>& v)
  {
    s << indent << "KPH: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.KPH);
    s << indent << "Deg: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Deg);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERP42_MSGS_MESSAGE_DRIVECMD_H
